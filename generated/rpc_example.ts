// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v5.28.2
// source: rpc_example.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientDuplexStream,
  type ClientOptions,
  type ClientReadableStream,
  type ClientUnaryCall,
  type ClientWritableStream,
  type handleBidiStreamingCall,
  type handleClientStreamingCall,
  type handleServerStreamingCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "";

export interface MyRequest {
  id: number;
  msg: string;
}

export interface MyResponse {
  msg: string;
}

function createBaseMyRequest(): MyRequest {
  return { id: 0, msg: "" };
}

export const MyRequest: MessageFns<MyRequest> = {
  encode(message: MyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.msg !== "") {
      writer.uint32(18).string(message.msg);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.msg = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MyRequest {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      msg: isSet(object.msg) ? globalThis.String(object.msg) : "",
    };
  },

  toJSON(message: MyRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.msg !== "") {
      obj.msg = message.msg;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MyRequest>, I>>(base?: I): MyRequest {
    return MyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MyRequest>, I>>(object: I): MyRequest {
    const message = createBaseMyRequest();
    message.id = object.id ?? 0;
    message.msg = object.msg ?? "";
    return message;
  },
};

function createBaseMyResponse(): MyResponse {
  return { msg: "" };
}

export const MyResponse: MessageFns<MyResponse> = {
  encode(message: MyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.msg !== "") {
      writer.uint32(10).string(message.msg);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.msg = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MyResponse {
    return { msg: isSet(object.msg) ? globalThis.String(object.msg) : "" };
  },

  toJSON(message: MyResponse): unknown {
    const obj: any = {};
    if (message.msg !== "") {
      obj.msg = message.msg;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MyResponse>, I>>(base?: I): MyResponse {
    return MyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MyResponse>, I>>(object: I): MyResponse {
    const message = createBaseMyResponse();
    message.msg = object.msg ?? "";
    return message;
  },
};

export type rpcExampleService = typeof rpcExampleService;
export const rpcExampleService = {
  unaryExample: {
    path: "/rpcExample/UnaryExample",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: MyRequest) => Buffer.from(MyRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => MyRequest.decode(value),
    responseSerialize: (value: MyResponse) => Buffer.from(MyResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => MyResponse.decode(value),
  },
  serverStreamExample: {
    path: "/rpcExample/ServerStreamExample",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: MyRequest) => Buffer.from(MyRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => MyRequest.decode(value),
    responseSerialize: (value: MyResponse) => Buffer.from(MyResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => MyResponse.decode(value),
  },
  clientStreamExample: {
    path: "/rpcExample/ClientStreamExample",
    requestStream: true,
    responseStream: false,
    requestSerialize: (value: MyRequest) => Buffer.from(MyRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => MyRequest.decode(value),
    responseSerialize: (value: MyResponse) => Buffer.from(MyResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => MyResponse.decode(value),
  },
  bidirectionalExample: {
    path: "/rpcExample/BidirectionalExample",
    requestStream: true,
    responseStream: true,
    requestSerialize: (value: MyRequest) => Buffer.from(MyRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => MyRequest.decode(value),
    responseSerialize: (value: MyResponse) => Buffer.from(MyResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => MyResponse.decode(value),
  },
} as const;

export interface rpcExampleServer extends UntypedServiceImplementation {
  unaryExample: handleUnaryCall<MyRequest, MyResponse>;
  serverStreamExample: handleServerStreamingCall<MyRequest, MyResponse>;
  clientStreamExample: handleClientStreamingCall<MyRequest, MyResponse>;
  bidirectionalExample: handleBidiStreamingCall<MyRequest, MyResponse>;
}

export interface rpcExampleClient extends Client {
  unaryExample(
    request: MyRequest,
    callback: (error: ServiceError | null, response: MyResponse) => void,
  ): ClientUnaryCall;
  unaryExample(
    request: MyRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: MyResponse) => void,
  ): ClientUnaryCall;
  unaryExample(
    request: MyRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: MyResponse) => void,
  ): ClientUnaryCall;
  serverStreamExample(request: MyRequest, options?: Partial<CallOptions>): ClientReadableStream<MyResponse>;
  serverStreamExample(
    request: MyRequest,
    metadata?: Metadata,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<MyResponse>;
  clientStreamExample(
    callback: (error: ServiceError | null, response: MyResponse) => void,
  ): ClientWritableStream<MyRequest>;
  clientStreamExample(
    metadata: Metadata,
    callback: (error: ServiceError | null, response: MyResponse) => void,
  ): ClientWritableStream<MyRequest>;
  clientStreamExample(
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: MyResponse) => void,
  ): ClientWritableStream<MyRequest>;
  clientStreamExample(
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: MyResponse) => void,
  ): ClientWritableStream<MyRequest>;
  bidirectionalExample(): ClientDuplexStream<MyRequest, MyResponse>;
  bidirectionalExample(options: Partial<CallOptions>): ClientDuplexStream<MyRequest, MyResponse>;
  bidirectionalExample(metadata: Metadata, options?: Partial<CallOptions>): ClientDuplexStream<MyRequest, MyResponse>;
}

export const rpcExampleClient = makeGenericClientConstructor(rpcExampleService, "rpcExample") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): rpcExampleClient;
  service: typeof rpcExampleService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
